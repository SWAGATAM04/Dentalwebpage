---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import Breadcrumbs from '../components/Breadcrumbs.astro';
import Button from '../components/Button.astro';
import { clinicInfo } from '../utils/clinicInfo';

const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Contact', href: '/contact' },
];

const businessHours = Object.entries(clinicInfo.hours).map(([day, hours]) => ({
  day,
  hours
}));
---

<Layout
  title="Contact Us | Revital Dental - Dentist Austin, TX 78753 | (737) 600-8776"
  description="Get in touch with Revital Dental for appointments, questions, or comments. Serving Austin, TX."
>
  <Hero
    title="Contact Revital Dental"
    subtitle="Location & Contact Information"
    images={["/images/hero/dental-2.jpg"]}
    height="md"
  />

  <Breadcrumbs items={breadcrumbItems} />

  <div class="py-16 bg-white">
    <div class="container mx-auto px-4">
      <!-- Introduction -->
      <section class="mb-16 max-w-3xl mx-auto text-center" data-aos="fade-up">
        <p class="text-lg text-gray-600">
          Our office offers a full array of dental services to help you create a satisfying smile.
          For any business or financial matters, you can reach {clinicInfo.name} at {clinicInfo.displayPhone}.
          Simply call, or you can provide us with the following information and we will contact you
          shortly to confirm your appointment. We're looking forward to meeting you.
        </p>
      </section>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <!-- Contact Form -->
        <section data-aos="fade-up">
          <div class="bg-white p-8 rounded-lg shadow-sm border border-gray-100">
            <h2 class="text-2xl font-bold font-heading text-gray-800 mb-6">Contact Us</h2>

            <!-- The ID on this form is crucial for the script to find it -->
            <form id="contact-form" class="space-y-6">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="first-name" class="block text-sm font-medium text-gray-700 mb-1">First Name*</label>
                  <input
                    type="text"
                    id="first-name"
                    name="firstName"  
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                  />
                </div>

                <div>
                  <label for="last-name" class="block text-sm font-medium text-gray-700 mb-1">Last Name*</label>
                  <input
                    type="text"
                    id="last-name"
                    name="lastName"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                  />
                </div>
              </div>

              <div>
                <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number*</label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                />
              </div>

              <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address*</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                />
              </div>

              <div>
                <label for="message" class="block text-sm font-medium text-gray-700 mb-1">How can we help you?*</label>
                <textarea
                  id="message"
                  name="message"
                  rows="4"
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                ></textarea>
              </div>

              <div class="flex items-start">
                <input
                  type="checkbox"
                  id="consent"
                  name="smsConsent"
                  required
                  class="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                />
                <label for="consent" class="ml-2 block text-sm text-gray-600">
                  By checking this box you will be agreeing to receive text messages from {clinicInfo.name}*
                </label>
              </div>
              
              <!-- The submit button is now a standard button inside the component slot -->
              <Button type="submit" variant="primary" class="w-full">
                Contact Us
              </Button>

              <p class="text-xs text-gray-500">
                This form is protected by reCAPTCHA and the Google
                <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-700">Privacy Policy</a> and
                <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-700">Terms of Service</a> apply.
              </p>
            </form>
          </div>
        </section>

        <!-- Contact Info & Hours -->
        <section class="space-y-8" data-aos="fade-up">
          <!-- ... (No changes to this section) ... -->
        </section>
      </div>

      <!-- Map -->
      <section class="mt-16" data-aos="fade-up">
        <!-- ... (No changes to this section) ... -->
      </section>

      <!-- CTA -->
      <section class="mt-16 text-center" data-aos="fade-up">
        <!-- ... (No changes to this section) ... -->
      </section>
    </div>
  </div>
</Layout>

<!-- ============================================= -->
<!-- ========= UPDATED & ROBUST SCRIPT ========= -->
<!-- ============================================= -->
<script>
  import { submitForm } from '../utils/forms';

  const formElement = document.getElementById('contact-form') as HTMLFormElement | null;

  /**
   * Displays a feedback message to the user within the form.
   */
  function displayFormMessage(formEl: HTMLFormElement, message: string, status: 'success' | 'error') {
    // Remove any existing message first
    const existingMessage = formEl.querySelector('.form-submission-message');
    if (existingMessage) {
      existingMessage.remove();
    }

    const messageDiv = document.createElement('div');
    messageDiv.className = 'form-submission-message';
    
    // Use Tailwind classes for styling based on status
    const baseClasses = 'mt-4 p-3 rounded-md text-sm text-center';
    const successClasses = 'bg-green-100 text-green-800';
    const errorClasses = 'bg-red-100 text-red-800';
    
    messageDiv.className = `${baseClasses} ${status === 'success' ? successClasses : errorClasses}`;
    messageDiv.innerText = message;
    
    // Insert the message before the submit button
    const submitBtn = formEl.querySelector('button[type="submit"]');
    if (submitBtn) {
      submitBtn.parentNode?.insertBefore(messageDiv, submitBtn);
    }
  }

  async function handleFormSubmit(event: Event) {
    event.preventDefault();
    if (!formElement) return;

    const submitBtn = formElement.querySelector('button[type="submit"]') as HTMLButtonElement | null;
    if (!submitBtn) return;

    const originalBtnHTML = submitBtn.innerHTML;

    // --- 1. Provide Instant UI Feedback ---
    submitBtn.disabled = true;
    submitBtn.innerHTML = `
      <div class="flex items-center justify-center">
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span>Submitting...</span>
      </div>
    `;
    displayFormMessage(formElement, '', 'success'); // Clear previous messages

    try {
      // --- 2. Collect and Map Form Data Correctly ---
      const formData = new FormData(formElement);
      const data = {
        firstName: formData.get('firstName') as string,
        lastName: formData.get('lastName') as string,
        phone: formData.get('phone') as string,
        email: formData.get('email') as string,
        message: formData.get('message') as string,
        // The value of a checked checkbox is 'on', so we convert it to a boolean
        smsConsent: formData.get('smsConsent') === 'on',
        formType: 'contact' as const,
      };

      // --- 3. Call the Form Submission Utility ---
      await submitForm(data);

      // --- 4. Handle Success ---
      displayFormMessage(formElement, 'Thank you! Your message has been sent successfully.', 'success');
      formElement.reset();

    } catch (error) {
      // --- 5. Handle Errors Gracefully ---
      console.error('Contact form submission error:', error);
      // The error.message comes from the more specific error handling in forms.ts
      displayFormMessage(formElement, `Error: ${error.message}`, 'error');

    } finally {
      // --- 6. Always Restore the UI ---
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalBtnHTML;
    }
  }

  // Attach the event listener if the form exists on the page
  if (formElement) {
    formElement.addEventListener('submit', handleFormSubmit);
  }
</script>
