---
import Button from './Button.astro';
import { clinicInfo } from '../utils/clinicInfo';
---

<div class="bg-white p-8 rounded-lg shadow-sm border border-gray-100">
  <h2 class="text-2xl font-bold font-heading text-gray-800 mb-6">Contact Us</h2>

  <form id="enhanced-contact-form" class="space-y-6">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <label for="first-name" class="block text-sm font-medium text-gray-700 mb-1">First Name*</label>
        <input
          type="text"
          id="first-name"
          name="firstName"  
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
        />
      </div>

      <div>
        <label for="last-name" class="block text-sm font-medium text-gray-700 mb-1">Last Name*</label>
        <input
          type="text"
          id="last-name"
          name="lastName"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
        />
      </div>
    </div>

    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number*</label>
      <input
        type="tel"
        id="phone"
        name="phone"
        required
        pattern="[0-9\-\(\)\+\s]+"
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
      />
    </div>

    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address*</label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
      />
    </div>

    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">How can we help you?*</label>
      <textarea
        id="message"
        name="message"
        rows="4"
        required
        minlength="10"
        maxlength="1000"
        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
      ></textarea>
      <div class="text-xs text-gray-500 mt-1">
        <span id="char-count">0</span>/1000 characters
      </div>
    </div>

    <!-- Time-based validation -->
    <input type="hidden" id="form-start-time" name="formStartTime" />
    
    <!-- Challenge question for additional bot prevention -->
    <div>
      <label for="challenge" class="block text-sm font-medium text-gray-700 mb-1">
        What is 5 + 3? (Anti-spam verification)*
      </label>
      <input
        type="number"
        id="challenge"
        name="challenge"
        required
        min="1"
        max="20"
        class="w-20 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
      />
    </div>

    <div class="flex items-start">
      <input
        type="checkbox"
        id="consent"
        name="smsConsent"
        required
        class="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
      />
      <label for="consent" class="ml-2 block text-sm text-gray-600">
        By checking this box you will be agreeing to receive text messages from {clinicInfo.name}*
      </label>
    </div>
    
    <Button type="submit" variant="primary" class="w-full">
      Contact Us
    </Button>

    <p class="text-xs text-gray-500">
      This form is protected by reCAPTCHA and the Google
      <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-700">Privacy Policy</a> and
      <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-700">Terms of Service</a> apply.
    </p>

    <!-- Status messages -->
    <div id="form-status" class="hidden"></div>
  </form>
</div>

<script>
  import { submitEnhancedForm, initializeBotPrevention } from '../utils/enhancedForms';

  // Initialize bot prevention
  initializeBotPrevention();

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('enhanced-contact-form') as HTMLFormElement;
    const startTimeInput = document.getElementById('form-start-time') as HTMLInputElement;
    const charCountSpan = document.getElementById('char-count');
    const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
    const statusDiv = document.getElementById('form-status');

    // Record form start time
    if (startTimeInput) {
      startTimeInput.value = Date.now().toString();
    }

    // Character counter
    if (messageTextarea && charCountSpan) {
      messageTextarea.addEventListener('input', () => {
        charCountSpan.textContent = messageTextarea.value.length.toString();
      });
    }

    // Form submission handler
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const originalBtnText = submitBtn.textContent;
        
        try {
          // Validate challenge question
          const challengeInput = document.getElementById('challenge') as HTMLInputElement;
          if (parseInt(challengeInput.value) !== 8) {
            throw new Error('Please answer the math question correctly.');
          }

          // Check minimum form interaction time (prevent instant submissions)
          const startTime = parseInt(startTimeInput.value);
          const minInteractionTime = 5000; // 5 seconds minimum
          if (Date.now() - startTime < minInteractionTime) {
            throw new Error('Please take a moment to review your information before submitting.');
          }

          // Show loading state
          submitBtn.disabled = true;
          submitBtn.textContent = 'Submitting...';
          
          // Clear previous status
          if (statusDiv) {
            statusDiv.className = 'hidden';
            statusDiv.textContent = '';
          }

          // Collect form data
          const formData = new FormData(form);
          const data = {
            firstName: formData.get('firstName') as string,
            lastName: formData.get('lastName') as string,
            phone: formData.get('phone') as string,
            email: formData.get('email') as string,
            message: formData.get('message') as string,
            smsConsent: formData.get('smsConsent') === 'on',
            formType: 'contact' as const,
          };

          // Submit with enhanced security
          await submitEnhancedForm(data, form);

          // Show success message
          if (statusDiv) {
            statusDiv.className = 'mt-4 p-3 rounded-md text-sm text-center bg-green-100 text-green-800';
            statusDiv.textContent = 'Thank you! Your message has been sent successfully. We will contact you soon.';
          }
          
          form.reset();
          if (startTimeInput) {
            startTimeInput.value = Date.now().toString();
          }
          if (charCountSpan) {
            charCountSpan.textContent = '0';
          }

        } catch (error) {
          console.error('Form submission error:', error);
          
          if (statusDiv) {
            statusDiv.className = 'mt-4 p-3 rounded-md text-sm text-center bg-red-100 text-red-800';
            statusDiv.textContent = error.message || 'An error occurred. Please try again.';
          }
        } finally {
          // Restore button state
          submitBtn.disabled = false;
          submitBtn.textContent = originalBtnText;
          
          // Show status message
          if (statusDiv) {
            statusDiv.classList.remove('hidden');
          }
        }
      });
    }
  });
</script>